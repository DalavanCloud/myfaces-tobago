#Converted from 'tobago-example/tobago-example-demo/src//main/resources/org/apache/myfaces/tobago/example/demo/Demo.xml'
#Thu Sep 20 19:43:06 CEST 2018

form_text1=<li>Values in the first form are being
  stored temporarily by submitting the second form while the value in the second
  form is written into the model.</li>
<li>By submitting both form each value is stored into
  the model.</li>
<li>If the first input contains an error but the second
  one validates, the validation of the first form is deactivated.</li>
  
tab_text=The tab control provides so called tab panels.
    <ul>
    <li>Control can take place on server- or clientside.</li>
    <li>Tab controls can be nested.</li>
    <li>Inside each tab control any other controls   can be used.</li>
    </ul>
  
theme_text=Tobago supports a big variety of displaying controls,
  so called designs or themes.
    <ul>
    <li>Choosing of themes can be application wide,   user or group specific.</li>
    <li>Images and other resources can be theme   dependant as well as the application pages can be designed seperatly   for each supported theme.</li>
    </ul>

themesCodeExample=...
<tobago-config>
    \u00A0       <theme-config>
    \u00A0           \u00A0       <default-theme>speyside</default-theme>
    \u00A0       </theme-config>
    \u00A0       <resource-dir>tobago</resource-dir>
</tobago-config>
...

themesText1=\
  <b>Theme configuration</b> <br /><br
    />
    In Tobago it's easy to give an application a well designed look. You can use
    prepared themes like speyside or scarborough, just to name two.
    The only thing you have to do is configure them at the right place. This is
    done in the tobago-config.xml by defining a default theme.

toolbar_text1=\
  Toolbars can be used for context sensitive actions inside box controls.
<ul>
<li>Toolbars can consist of images, text or both.</li>
<li>Toolbars can be completly integrated into a box header.</li>
<li>Actions can be displayed as drop down menues.</li>
</ul>
  
validation_text=\
  Tobago provides easy to use possibilities for validation of user input.
    <ul>
    <li>Syntactic and semantic validation is available.</li>
    <li>Error messages can be positioned anywhere in the   user interface.</li>
    <li>Input elements, which are affected by the   validation can be highlighted.</li>
    </ul>

