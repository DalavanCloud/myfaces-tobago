# Copyright 2002-2005 atanion GmbH.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

#
# navigate
#
intro=Intro
navigationRules=Navigationsregeln
classDefinition=Klassen Beschreibung
jspDefinition=JSP Seiten
theme=Themes
validation=Validierung
i18n=Internationalisierung
overview=Übersicht
overviewNavigateTooltip=Link zur Übersicht


#
#Intro
#
introText1=<b>Einleitung</b><br /> \
  In diesem Mini Howto soll gezeigt werden wie einfach und schnell eine kleine \
  Webapplikation mit Tobago realisiert werden kann. Ziel dieses Howtos ist es, \
  eine Applikation zu entwickeln, welche verschiedene Design über einen Theme \
  Mechanismus zur Verfügung stellt, Benutzereingaben validiert und eine \
  internationalisierte GUI bietet. In den nächsten Schritten geben wir einen \
  Überblick über folgende Funktionen:\
  <ul> \
  <li>Programmieren der JSP Seiten</li> \
  <li>Festlegen der Navigations Reihenfolge</li>\
  <li>Implementieren der nötigen Klassen</li>\
  <li>Einbinden eines zweiten Themes</li>\
  <li>Validierung der Eingaben</li>\
  <li>Internationalisieren der Anwendung</li>\
  </ul>\
  Das Adressbuch wird eine sehr einfache Applikation, die es ermöglicht Adressen \
  mit einigen zusätzlichen Daten, wie. z.B. eMail, Telefon, Geburtstag usw. zu \
  speichern.
#
#JSP Pages
#
jspDefinitionText1=<b>JSP Seiten</b> <br /> \
  Für die Applikation werden 2 einfache JSP Seiten mit Tobago Tags genutzt. Eine \
  Seite mit einem Tobago Sheet zum Anzeigen einer Liste der gespeicherten \
  Adressen und eine weitere zum Anzeigen der Adressen selbst.
jspDefinitionCodeExampleBoxTitle1=Sheet Code Beispiel:
jspDefinitionCodeExample1=... \u000A \
  <t:sheet columns="1*;1*" value="#{controller.addressList}"\u000A \
  \u00A0 \u00A0 \u00A0 \u00A0var="address" stateBinding="#{controller.selectedAddresses}">\u000A \
  \u00A0 \u00A0<t:column label="First Name" sortable="true"> \u000A \
  \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0<t:out value="#{address.firstName}" /> \u000A \
  \u00A0 \u00A0</t:column> \u000A \
  \u00A0 \u00A0<t:column label="Last Name" sortable="true"> \u000A \
  \u00A0 \u00A0 \u00A0 \u00A0<t:out value="#{address.lastName}" /> \u000A \
  \u00A0 \u00A0</t:column> \u000A \
  </t:sheet> \u000A \
 ...
jspDefinitionText2=Dies ist ein Code Ausschnitt für die Darstellung der Werte im \
  Sheet. Die Werte stehen dem Sheet in einem List Objekt zur Verfügung und \
  werden dann über die hier vergebene Variable Attribut "address" ausgelesen.

#
#Navigation Rules
#
navigationRulesText1=<b>Navigationsregeln</b><br /> \
  Um nach Aktionen auf die jeweils richtige Seite zu gelangen, wird in der der \
  Datei "faces-config.xml" der Programmfluß festgelegt.<br /> \

navigationRulesBoxTitle1=Code Beispiel
navigationRules_codeExample1=<navigation-rule>\u000A \
  \u00A0 \u00A0<navigation-case>\u000A \
  \u00A0 \u00A0 \u00A0 \u00A0<from-outcome>editor</from-outcome>\u000A \
  \u00A0 \u00A0 \u00A0 \u00A0<to-view-id>/editor.jsp</to-view-id\u000A \
  \u00A0 \u00A0</navigation-case>\u000A \
  \u00A0 \u00A0<navigation-case>\u000A \
  \u00A0 \u00A0 \u00A0 \u00A0<from-outcome>list</from-outcome>\u000A \
  \u00A0 \u00A0 \u00A0 \u00A0<to-view-id>/list.jsp</to-view-id>\u000A \
  \u00A0 \u00A0</navigation-case>\u000A \
  </navigation-rule>\u000A
navigationRulesText2=Aus der Applikation bekommt man als return Wert (outcome) \
  jeweils einen String der die nächste Seite enthält (in diesem Beispiel \
  "editor" oder "list"). Je nach Wert dieses Outcomes leitet Faces den Benutzer \
  auf die zugehörige Seite.

#
#Class Description
#
classDefinitionText1=<b>Die "Controller" Klasse</b><br /> \
  Für die Applikation wird neben ein paar Hilfsklassen vor allem die "Controller" \
  Klasse verwendet. In dieser Klasse werden Methoden zum Auslesen und Speichern \
  von Adressdaten angelegt. Zudem kontrolliert sie das Outcome, mit dem \
  entschieden wird auf welche Seite als nächstes geleitet wird.
classDefinitionBoxTitle=Code Beispiel
classDefinitionCodeExample=...\u000A \
  public String storeAddress() {\u000A \
\u00A0 \u00A0 if (currentStored) {\u000A \
\u00A0 \u00A0 \u00A0 \u00A0 // nothing to do for this backend \u000A \
\u00A0 \u00A0 } else { \u000A \
\u00A0 \u00A0 \u00A0 \u00A0 addressList.add(currentAddress); \u000A \
\u00A0 \u00A0 \u00A0 \u00A0 selectedAddresses.resetSelected();\u000A \
\u00A0 \u00A0 }\u000A \
\u00A0 \u00A0 \u00A0 \u00A0 return "list";\u000A \
\u00A0 \u00A0 } \u000A \
...

#
#Themes
#
themesText1=<b>Themes konfigurieren</b> <br /> \
  Um der Anwendung ein bestimmtes Aussehen zu geben wird in der Datei \
  "tobago-config.xml" ein Theme angegeben, dass für die Applikation verwendet \
  werden soll. <br />\
  Die Klasse im Tag default-theme definert dieses Standard-Theme. An dieser Stelle \
  können weitere Themes definiert werden, die der User gegebenenfalls selbst \
  auswählen kann.
themesCodeExampleBoxTitle1=Code Beispiel
themesCodeExample1=... \u000A \
<tobago-config>\u000A \
\u00A0 \u00A0 <theme-config>\u000A \
\u00A0 \u00A0 \u00A0 \u00A0 <default-theme>org.apache.myfaces.tobago.context.SpeysideTheme</default-theme>\u000A \
\u00A0 \u00A0 </theme-config>\u000A \
\u00A0 \u00A0 <resource-dir>tobago</resource-dir>\u000A \
</tobago-config>\u000A \
...

#themesText2=

#
#Validation
#
validationText1=<b>Validierung der Eingaben</b> <br /> \
  Tobago unterstützt den Benutzer bei der Eingabe von Werten indem es \
  Möglichkeiten zur Validierung dieser bereitstellt. Um beispielsweise das Eingabefeld \
  "First Name" auf Inhalt zu validieren ist folgender Code notwendig:
validationCodeExampleBoxTitle1=Code Beispiel
validationCodeExample1=... \u000A \
<t:box label="Address Editor" >\u000A \
\u00A0 \u00A0 <f:facet name="layout">\u000A \
\u00A0 \u00A0 \u00A0 \u00A0 <t:gridLayout rows="fixed; {...} ;fixed;"  />\u000A \
\u00A0 \u00A0 </f:facet>\u000A \
\u000A \
\u00A0 \u00A0 <t:messages />\u000A \
\u000A \
\u00A0 \u00A0 <t:in value="#{controller.currentAddress.firstName}" \u000A \
\u00A0 \u00A0 \u00A0 \u00A0 label="First Name" required="true" />\u000A \
...\u000A \
</t:box>

validationText2=Mit Hilfe des required Attributs wird das Feld auf beliebigen \
  Inhalt geprüft. Um die evtl. auftretende Fehlermeldung später anzuzeigen, muss \
  ein &lt;t:messages&gt; auf der JSP platziert werden. An dieser Stelle werden die \
  Fehlermeldungen ausgegeben.

#
#Internationalisation
#

i18nText1=<b>Internationalisierung</b> <br /> \
  Als letzter Schritt soll die Applikation noch in anderen Sprachen verfügbar \
  gemacht werden. Dazu stellt man der Applikation die übersetzten Texte in \
  sogenannten Resource Bundles zur Verfügung. Diese Bundles sind Property \
  Dateien in denen sog. "Key/Value" Paare stehen, die für eine Variable  jeweils \
  die der Sprache zugehörige Übersetzung liefern. In der Applikation wird dann \
  nur noch die entsprechende Variable genutzt die durch den übersetzten Text \
  ersetzt wird. Die deutsche Übersetzung wird in der deutschen Property Datei \
  festgelegt address-demo_de.properties: <br /><br />\
  Um das Bundle verfügbar zu machen, muss es auf der JSP Seite geladen werden:
i18nCodeExampleBoxTitle1=Code Beispiel
i18nCodeExample1=

i18nText2=Innerhalb der Tags können nun die bisherigen Texte durch die in den \
  Property Dateien definierten Keys ersetzt werden:
i18nCodeExampleBoxTitle2=Code Beispiel
i18nCodeExample2=

#i18nText3=
#i18nCodeExampleBoxTitle3=Code Beispiel
#i18nCodeExample3=