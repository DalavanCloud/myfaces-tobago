# Copyright 2002-2005 atanion GmbH.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

#
# navigate
#
pageTitle=Addressbook Mini Howto
intro=Introduction
navigationRules=Navigationrules
classDefinition=Class description
jspDefinition=JSP´s
theme=Themes
validation=Validation
i18n=Internationalisation
overview=Overview
overviewNavigateTooltip=Link to the Tobago Overview
codeExample=Code example
#
#Intro
#
introText1=<b>Introduction</b><br /> \
  Easy development of webapplications is the main goal of Tobago. And how easy \
  it is to develop a simple addressbook webapplication is what we want to show \
  you in this short guide. \
  The addressbook application will support different themes, validate user input \
  and will be internationalized.<br />\
  In the next steps we will do the following:\
  <ul> \
  <li>Programming of the JSP´s</li> \
  <li>Define the navigation rules</li>\
  <li>Implement the business logic</li>\
  <li>Include a second theme</li>\
  <li>Validate the User entries</li>\
  <li>Internationalize the application</li>\
  </ul>\
  The addressbook will be a very simple application for demo use. It mainly features \
  storing of address data plus some additional info of the contact, such as \
  e-mail, phonenumbers, birthday etc.

#
#JSP Pages
#
jspDefinitionText1=<b>JSP´s</b> <br /> \
  For this simple application you just need two JSP´s with Tobago elements. One to \
  store and one to display the contact data. \
  For displaying the contact´s we will use a Tobago sheet. To enter the data \
  there will be a page with some input elements and a Tobago date control to enter \
  the birthdate.
jspDefinitionCodeExample1=... \u000A \
  <t:sheet columns="1*;1*" value="#{controller.addressList}"\u000A \
         var="address" stateBinding="#{controller.selectedAddresses}">\u000A \
     <t:column label="First Name" sortable="true"> \u000A \
             <t:out value="#{address.firstName}" /> \u000A \
     </t:column> \u000A \
     <t:column label="Last Name" sortable="true"> \u000A \
         <t:out value="#{address.lastName}" /> \u000A \
     </t:column> \u000A \
  </t:sheet> \u000A \
 ...
jspDefinitionText2=This is a part of the code example for the sheet component. \
  The addresses which the sheet will display are delivered by a list object which is bound to \
  the sheet via the stateBinding attribute. In the coloums you simply have to \
  refer to the values in the list via the given variable ´address´.

#
#Navigation Rules
#
navigationRulesText1=<b>Navigation rules</b><br /> \
  In the application the navigation ist configured from view to view in the \
  file: ´faces-config.xml´.
navigationRules_codeExample1=<navigation-rule>\u000A \
     <navigation-case>\u000A \
         <from-outcome>editor</from-outcome>\u000A \
         <to-view-id>/editor.jsp</to-view-id\u000A \
     </navigation-case>\u000A \
     <navigation-case>\u000A \
         <from-outcome>list</from-outcome>\u000A \
         <to-view-id>/list.jsp</to-view-id>\u000A \
     </navigation-case>\u000A \
  </navigation-rule>\u000A
navigationRulesText2=You get the outcome string defined here from the application \
  itself as return value. This string is always the next rendered page, in this example \
  the outcome can be ´list´ or ´editor´ \

#
#Class Description
#
classDefinitionText1=<b>The Controller Class</b><br /> \
  The business logic, like storing/getting the data etc. is done by the ´Controller´ \
  class. The return string of the executed method represents the outcome for the \
  navigation.
classDefinitionCodeExample=...\u000A \
  public String storeAddress() {\u000A \
    if (currentStored) {\u000A \
        // nothing to do for this backend \u000A \
    } else { \u000A \
        addressList.add(currentAddress); \u000A \
        selectedAddresses.resetSelected();\u000A \
    }\u000A \
        return "list";\u000A \
    } \u000A \
...

#
#Themes
#
themesText1=<b>Theme configuration</b> <br /> \
  In Tobago it's easy to give an application a well designed look. You can use \
  prepared themes like speyside oder scarborough, just to name two.<br />\
  The only thing you have to do is configure them at the right place. This is \
  done in the tobago-config.xml by defining a default theme.
themesCodeExample1=... \u000A \
<tobago-config>\u000A \
    <theme-config>\u000A \
        <default-theme>org.apache.myfaces.tobago.context.SpeysideTheme</default-theme>\u000A \
    </theme-config>\u000A \
    <resource-dir>tobago</resource-dir>\u000A \
</tobago-config>\u000A \
...


#
#Validation
#
validationText1=<b>Validation of user input</b> <br /> \
  Tobago supports the user by validating entered data if the developer \
  configured validation for input elements. To do that, the developer simply \
  has to bind a validator to a specific input field and configure the validation \
  method (e.g. only strings, e-mail patterns or numbers from 1 to 10 etc.).<br />
validationCodeExample1=... \u000A \
<t:box label="Address Editor" >\u000A \
    <f:facet name="layout">\u000A \
        <t:gridLayout rows="fixed; {...} ;fixed;"  />\u000A \
    </f:facet>\u000A \
\u000A \
    <t:messages />\u000A \
\u000A \
    <t:in value="#{controller.currentAddress.firstName}" \u000A \
        label="First Name" required="true" />\u000A \
...\u000A \
</t:box>

validationText2=In this example a required validator is bound to the ´first name´ \
  input field. It just tells the user that he has to enter some text.   If you \
  want to give the user a hint what he has made wrong (and that is what you \
  generally want ;-)), you have to place the tobago messages tag on \
  the page. If error messages are in the faces context, they are rendered at \
  this defined place.

#
#Internationalisation
#

i18nText1=<b>Internationalisation</b> <br /> \
  The last step in our short guide is to i18n the application. Since now we just \
  entered the values for the labels as hardcoded text. If we want our application \
  to support more languages, we have to separate the language specific contents \
  from the JSP´s. This is done by putting all language specific text into a \
  resource bundle and load this bundle on each page where we want to use it. \
  In this property file we have unique key/value combinations for te translation. \
  Everywhere where we want internationalsized text we have to refer to the key. <br /> \
  Therefor you have to tell the application where to find the key, so we \
  have to load the resources bundle first as said before:
i18nCodeExample1=<f:loadBundle \u000A \
        basename="org.apache.myfaces.tobago.example.addressbook.Resources" \u000A \
        var="bundle"/>

i18nText2=To use the translated text for example in the attribute of an input \
  field we have to refer to the resource bundle by the given variable (in this \
  case ´bundle´) and the key.
i18nCodeExample2=<t:button label="#{bundle.listNew}" \
  action="#{controller.createAddress}" />