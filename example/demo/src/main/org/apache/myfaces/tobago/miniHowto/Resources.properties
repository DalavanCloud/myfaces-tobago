# Copyright (c) 2004 Atanion GmbH, Germany
# All rights reserved. Created 19.05.2004 18:47:47.
# $Id: Resources.properties 1189 2005-02-24 13:40:56 +0100 (Do, 24 Feb 2005) lofwyr $
#

#
# navigate
#
intro=Intro
navigationRules=Navigationsregeln
classDefinition=Klassen Beschreibung
jspDefinition=JSP Seiten
theme=Themes
validation=Validierung
i18n=Internationalisierung
overview=Übersicht
overviewNavigateTooltip=Link zur Übersicht


#
#Intro
#

introText1=<b>Einleitung</b><br /> \
In diesem Mini Howto möchten wir Ihnen zeigen, wie einfach es ist eine \
Web-Applikation mit Hilfe des Tobago Frameworks zu programmieren. \
Ziel dieses Howtos ist es eine Theme gemanagete, Eingaben validierende und \
zweisprachige Number-Guess Applikation zu entwickeln. \u000A \
\u000A \
In den einzelnen Schritten geben wir Ihnen einen Überblick über folgende Funktionen: <br />\
<ul style="margin-top="2px"> \
  <li>Festlegen der Navigations Reihenfolge</li> \
  <li>Implementieren der NumberGuess Klasse</li> \
  <li>Programmieren der JSP Seiten</li> \
  <li>Einbinden eines zweiten Themes</li> \
  <li>Validierung der Eingaben</li> \
  <li>Internationalisieren der Anwendung</li> \
</ul>\
Die Number Guess Applikation ist ein Ratespiel in dem man eine bestimmte Zahl \
zwischen 1 und 10 raten muss. Gewonnen hat der Spieler mit den wenigsten Versuchen.

#
#Navigation Rules
#


navigationRulesText1=<b>Navigationsregeln</b> <br /> \
Bevor programmiert wird, soll der Programmfluss festgelegt werden. \
Die Applikation wird aus 2 Seiten bestehen: \
<br /> \
<br /> \
<b>JSP Dateien</b> <br /> \
Die Datei <span class="tobago-code">guess.jsp</span> beinhaltet das Eingabe Feld für die \
Zahl und einen Button um die Zahl zur Prüfung an den Server zu schicken. Bei \
erfolgreicher Prüfung wird auf die Seite <span class="tobago-code">win.jsp</span> \
weitergeleitet, ansonsten wird die Datei <span class="tobago-code">guess.jsp</span> \
erneut aufgerufen. \
 <br /> \
 <br /> \
<b>faces-config.xml</b> <br /> \
Um die Navigation zu steuern, werden in der Datei <span class="tobago-code"> \
faces-config.xml</span> Navigations Regeln festgelegt:

navigationRulesBoxTitle1=Code Beispiel
navigationRules_codeExample1=<navigation-rule> \u000A \
\u00A0 \u00A0<from-view-id>/guess.jsp</from-view-id> \u000A \
\u00A0 \u00A0<navigation-case> \u000A \
\u00A0 \u00A0 \u00A0 \u00A0<from-outcome>wrong</from-outcome> \u000A \
\u00A0 \u00A0 \u00A0 \u00A0<to-view-id>/guess.jsp</to-view-id> \u000A \
\u00A0 \u00A0</navigation-case>  \u000A\
\u00A0 \u00A0<navigation-case> \u000A \
\u00A0 \u00A0 \u00A0 \u00A0<from-outcome>right</from-outcome> \u000A \
\u00A0 \u00A0 \u00A0 \u00A0<to-view-id>/win.jsp</to-view-id> \u000A \
\u00A0 \u00A0</navigation-case> \u000A \
</navigation-rule> \


#
#Class Description
#
classDefinitionText1=<p><b>Die "NumberGuessController" Klasse</b> <br /> \
Für die Applikation wird nur eine Klasse benötigt. Die zentrale Methode ist, \
neben einigen Hilfsmethoden, die <span class="tobago-code">check()</span> Methode.</p>
classDefinitionBoxTitle=Code Beispiel
classDefinitionCodeExample=public String check() {\u000A \
\u00A0 \u00A0count++;\u000A \
\u00A0 \u00A0if (guess == number) { \u000A \
\u00A0 \u00A0 \u00A0 \u00A0infoText = GOT_IT; \u000A \
\u00A0 \u00A0 \u00A0 \u00A0return "right"; \u000A \
\u00A0 \u00A0} else if (guess < number) { \u000A \
\u00A0 \u00A0 \u00A0 \u00A0infoText = TOO_SMALL; \u000A \
\u00A0 \u00A0 \u00A0 \u00A0return "wrong"; \u000A \
\u00A0 \u00A0} else { \u000A \
\u00A0 \u00A0 \u00A0 \u00A0infoText = TOO_LARGE; \u000A \
\u00A0 \u00A0 \u00A0 \u00A0return "wrong"; \u000A \
\u00A0 \u00A0} \u000A \
}

classDefinitionText2=Hier wird entschieden, ob die Zahl erraten, zu klein oder zu groß ist. Ist die \
Zahl richtig, wird als Rückgabe "right" zurückgegeben, was zur Folge hat, dass die \
<span class="tobago-code">win.jsp</span> an den Client geschickt wird. Hier ist \
es wichtig, dass die Rückgabewerte mit den definierten \
<span class="tobago-code">outcome</span> Werten aus der \
<span class="tobago-code">faces-config.xml</span> übereinstimmen.

#
#JSP Pages
#

jspDefinitionText1=<b>JSP Seiten</b> <br /> \
Eingangs wurde gesagt, dass wir 2 JSP Seiten brauchen werden. Die erste Seite um die \
Daten einzugeben und eine weitere um ein Ergebnis anzuzeigen. \
 \u000A \
Um Daten an  die Applikation zu senden, benötigen wir zwei Tobago Elemente: \
<ul> \
<li>Ein Text-Input Control um die Zahl einzugeben</li> \
<li>Einen Submit Button, der die Eingabe an die Applikation sendet</li> \
</ul> \

jspDefinitionCodeExampleBoxTitle1=Code Beispiel
jspDefinitionCodeExample1=... \u000A \
1:\u00A0<jsp:useBean id="number"\u000A \
2:\u00A0\u00A0\u00A0class="com.atanion.app.numberguess.NumberGuessControler" \u000A \
3:\u00A0\u00A0\u00A0scope="session" /> \u000A \
4:\u00A0\u000A\
5:\u00A0<t:in  value="#{number.guess}" label="Ihr Tip?" /> \u000A \
6:\u00A0\u000A \
7:\u00A0<t:button action="#{number.check}"> \u000A \
8:\u00A0\u00A0 \u00A0 <t:out value="Eingabe senden" /> \u000A \
9:\u00A0</t:button> \u000A \
...

jspDefinitionText2=In der ersten Zeile stellen wir über die ID <span class="tobago-code">number</span> \
ein Objekt der Klasse <span class="tobago-code">NumberGuessController</span> (Zeile 2) \
zur Verfügung. \
<br /> \
In den nächsten Zeilen definieren wir eine \
<span class="tobago-code">tobago:textbox</span>. \
Hier hat der Benutzer die Möglichkeit seinen Tip einzugeben. Das \
<span class="tobago-code">value</span> Attribut gibt den Variablennamen der \
Eingabe an, mit dem die Applikation arbeitet. Das Label dient als Bezeichnung \
des Input Feldes.


#
#Themes
#

themesText1=<b>Themes konfigurieren</b> <br /> \
Um der Anwendung ein bestimmtes Aussehen zu geben, haben wir in der \
<span class="tobago-code">tobago-config.xml</span> ein Theme angegeben.\u000A
themesCodeExampleBoxTitle1=Code Beispiel
themesCodeExample1=<theme-config>\u000A\
\u00A0\u00A0<default-theme>org.apache.myfaces.tobago.context.SpeysideTheme</default-theme>\u000A\
\u00A0\u00A0<supported-theme>org.apache.myfaces.tobago.context.ScarboroughTheme</supported-theme>\u000A\
</theme-config>\u000A\u000A
themesText2=Die Klasse im Tag <span class="tobago-code">default-theme</span> \
gibt das Theme an, welches normalerweise für die Applikation Verwendung \
findet. Mit dem Tag <span class="tobago-code">supported-theme</span> \
können weitere Themes angegeben werden, welche dann beispielsweise über \
das User-Management aktiviert werden können.

#
#Validation
#

validationText1=<b>Validierung der Eingaben</b> <br /> \
Bisher können alle Zahlen an die Applikation gesendet werden. Da wir das \
Zahlenraten auf die Zahlen von 1 bis 10 beschränkt haben, wollen wir die Tipps \
schon vorher validieren und auf diesen Bereich begrenzen. \
Validierung ist in Tobago bereits eingebaut und so muss man nur noch angeben \
welche Felder validiert werden müssen, auf was validiert wird und man muss einen \
Platz für die Fehlermeldungen im Seitendesign vorsehen:
validationCodeExampleBoxTitle1=Code Beispiel
validationCodeExample1=<t:messages id="vm" /> \u000A \
\u000A \
<t:in value="#{number.guess}" label="Ihr Tip?"> \u000A \
\u00A0 \u00A0 <f:validateLongRange minimum="1" maximum="10" required="true" /> \u000A \
</t:in> \u000A
validationText2=Für das Feld sind nun zwei Validatoren definiert worden. Einmal geben wir mit dem \
long range validator einen Gültigkeitsbereich an, der zwischen 1 und 10 liegt. \
Desweiteren definieren wir mit <span class="tobago-code">required="true"</span> dass \
dieses Feld auf jeden Fall einen Wert besitzen muss, wenn es an den Server geschickt wird. \
Wird keine Eingabe oder eine Eingabe mit falschen Wert (Buchstaben, \
eine Zahl über 10 o.ä.) gemacht, wird an der vorgesehenen Stelle für die \
<span class="tobago-code">tobago:messages</span> die jeweils passende Fehlermeldung \
ausgegeben.

#
#Internationalisation
#

i18nText1=<b>Internationalisierung</b> <br /> \
	Als letzter Schritt soll die Applikation noch in anderen Sprachen \
	verfügbar gemacht werden. Dazu stellt man der Applikation die übersetzten Texte \
	in sogenannten Bundles zur Verfügung. Diese Bundles sind Property Dateien, in \
	denen sog. "Key/Value" Paare stehen, die für einen "Value" jeweils die der Sprache \
	zugehörige Übersetzung liefern. \u000A \
	In der Applikation wird dann nur noch die entsprechende Variable genutzt und \
	durch den übersetzten Text ersetzt. \u000A \
	Die deutsche Übersetzung wird in der deutschen Property Datei festgelegt \
	<span class="tobago-code">numberguess_de.properties</span>: \

i18nCodeExampleBoxTitle1=Code Beispiel
i18nCodeExample1=... \u000A \
	yourGuess=Ihr Tipp? \u000A \
	again=Noch mal spielen? \u000A \
	submit=Abschicken \u000A \
	... 

i18nText2=Um das Bundle verfügbar zu machen, muss es noch auf der JSP Seite geladen werden:
i18nCodeExampleBoxTitle2=Code Beispiel
i18nCodeExample2=<f:loadBundle basename="com.atanion.app.numberguess.numberguess" \
  var="bundle" />

i18nText3=Innerhalb der Tags können nun die bisherigen Texte durch die in den Property \
Dateien definierten Keys ersetzt werden:
i18nCodeExampleBoxTitle3=Code Beispiel
i18nCodeExample3=<t:in label="#{bundle.yourGuess}" value="#{number.guess}" />
