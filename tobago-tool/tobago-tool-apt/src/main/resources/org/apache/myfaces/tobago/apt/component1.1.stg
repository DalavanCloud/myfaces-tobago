group components;

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

component(componentInfo) ::= <<
// ---------- Attention: Generated code, please do not modify! -----------  

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <componentInfo.packageName>;

<componentInfo.imports:import(); separator="\n">

/** 
 * UIComponent class, generated from template {@code component1.1.stg} with class 
 * {@link <componentInfo.sourceClass>}.
 */
public class <componentInfo.className>
    extends <componentInfo.superClassName> <first(componentInfo.interfaces):{ n | implements <n>}><rest(componentInfo.interfaces):{ n |, <n>}> {

  <if(componentInfo.componentType)>
  public static final String COMPONENT_TYPE = "<componentInfo.componentType>";

  <endif>
  <if(componentInfo.componentFamily)>
  public static final String COMPONENT_FAMILY = "<componentInfo.componentFamily>";

  <endif>
  <componentInfo.properties:field(); separator="\n">

  <if(componentInfo.componentFamily)>
  public String getFamily() {
    return COMPONENT_FAMILY;
  }

  <endif>
  <componentInfo.properties:{ p | <p:(p.propertyTemplate)()>}; separator="\n">

  <if(componentInfo.properties)>
  public void restoreState(FacesContext context, Object componentState) {
    Object[] values = (Object[]) componentState;
    super.restoreState(context, values[0]);
    <componentInfo.properties:{ p | <p:(p.propertyRestoreStateTemplate)()>}; separator="\n">
  }

  public Object saveState(FacesContext context) {
    Object[] values = new Object[<componentInfo.propertiesSizePlusOne>];
    values[0] = super.saveState(context);
    <componentInfo.properties:{ p | <p:(p.propertySaveStateTemplate)()>}; separator="\n">
    return values;
  }
  <endif>

  <if(componentInfo.messages)>
  <messages()>
  <endif>
  
  <if(componentInfo.invokeOnComponent)>
  <invokeOnComponent()>
  <endif>

}
>>

import() ::= <<
import <it>;
>>
invokeOnComponent() ::= <<
public boolean invokeOnComponent(FacesContext context, String clientId, ContextCallback callback)
    throws FacesException {
  return FacesUtils.invokeOnComponent(context, this, clientId, callback);
}
>>

messages() ::= <<
protected void validateValue(FacesContext context, Object convertedValue) {
  boolean empty = convertedValue == null
      || (convertedValue instanceof String && ((String) convertedValue).length() == 0);

  if (isRequired() && empty && getRequiredMessage() != null) {
    String requiredMessage = getRequiredMessage();
    context.addMessage(this.getClientId(context),
        new javax.faces.application.FacesMessage(javax.faces.application.FacesMessage.SEVERITY_ERROR, requiredMessage, requiredMessage));
    setValid(false);
    return;
  }
  String validatorMessage = getValidatorMessage();
  if (validatorMessage == null) {
    super.validateValue(context, convertedValue);
  } else {
    for (javax.faces.validator.Validator validator : getValidators()) {
      try {
        validator.validate(context, this, convertedValue);
      } catch (javax.faces.validator.ValidatorException e) {
        setValid(false);
        context.addMessage(getClientId(context),
            new javax.faces.application.FacesMessage(javax.faces.application.FacesMessage.SEVERITY_ERROR, validatorMessage, validatorMessage));
      }
    }

    javax.faces.el.MethodBinding validatorBinding = getValidator();
    if (validatorBinding != null) {
      try {
        validatorBinding.invoke(context, new Object[]{context, this, convertedValue});
      } catch (javax.faces.el.EvaluationException e) {
        setValid(false);
        Throwable cause = e.getCause();
        if (cause instanceof javax.faces.validator.ValidatorException) {
          context.addMessage(getClientId(context),
              new javax.faces.application.FacesMessage(javax.faces.application.FacesMessage.SEVERITY_ERROR, validatorMessage, validatorMessage));
        } else {
          throw e;
        }
      }
    }
  }
}

protected Object getConvertedValue(FacesContext context, Object submittedValue) {
  String converterMessage = getConverterMessage();
  if (converterMessage == null) {
    return super.getConvertedValue(context, submittedValue);
  } else {
    try {
      javax.faces.render.Renderer renderer = getRenderer(context);
      if (renderer != null) {
        return renderer.getConvertedValue(context, this, submittedValue);
      } else if (submittedValue instanceof String) {
        javax.faces.convert.Converter converter = findUIOutputConverter(context);
        if (converter != null) {
          return converter.getAsObject(context, this, (String) submittedValue);
        }
      }
    } catch (javax.faces.convert.ConverterException e) {
      context.addMessage(getClientId(context),
          new javax.faces.application.FacesMessage(javax.faces.application.FacesMessage.SEVERITY_ERROR, converterMessage, converterMessage));
      setValid(false);
    }
    return submittedValue;
  }
}

private javax.faces.convert.Converter findUIOutputConverter(FacesContext facesContext) {
  // Attention!
  // This code is duplicated in myfaces implementation renderkit package.
  // If you change something here please do the same in the other class!

  javax.faces.convert.Converter converter = getConverter();
  if (converter != null) {
    return converter;
  }

  //Try to find out by value binding
  javax.faces.el.ValueBinding vb = getValueBinding("value");
  if (vb == null) {
    return null;
  }

  Class valueType = vb.getType(facesContext);
  if (valueType == null) {
    return null;
  }

  if (String.class.equals(valueType)) {
    return null;    //No converter needed for String type
  }
  if (Object.class.equals(valueType)) {
    return null;    //There is no converter for Object class
  }

  try {
    return facesContext.getApplication().createConverter(valueType);
  } catch (FacesException e) {
    return null;
  }
}

>>

IntegerProperty(property) ::= <<

public <property.type> get<property.upperCamelCaseName>() {
  if (<property.propertyName> != null) {
    return <property.propertyName>;
  }
  <getValueExpression(property)>
  if (vb != null) {
    Number number = (Number) <getValue(property)>
    if (number != null) {
      return number.intValue();
    }
  }
  <if(property.defaultCode)>
  return <property.defaultCode>;
  <else>
  return null;
  <endif>
}

public void set<property.upperCamelCaseName>(<property.type> <property.propertyName>) {
  this.<property.propertyName> = <property.propertyName>;
}
>>

ObjectProperty(property) ::= <<

public <property.type> get<property.upperCamelCaseName>() {
  if (<property.propertyName> != null) {
    return <property.propertyName>;
  }
  <getValueExpression(property)>
  if (vb != null) {
    return (<property.type>) <getValue(property)>
  }
  return null;
}

public void set<property.upperCamelCaseName>(<property.type> <property.propertyName>) {
  this.<property.propertyName> = <property.propertyName>;
}
>>

StringArrayProperty(property) ::= <<

public String[] get<property.upperCamelCaseName>() {
  if (<property.propertyName> != null) {
    return <property.propertyName>;
  }
  <getValueExpression(property)>
  if (vb != null) {
    Object strArray = <getValue(property)>
    if (strArray instanceof String[]) {
      return (String[]) strArray;
    } else if (strArray instanceof String) {
      String[] strings = ((String) strArray).split("[, ]");
      java.util.List\<String\> result = new java.util.ArrayList\<String\>(strings.length);
      for (String string : strings) {
        if (string.trim().length() != 0) {
          result.add(string.trim());
        }
      }
      return result.toArray(new String[result.size()]);
    } else if (strArray == null) {
      return new String[0];
    } else {
      return new String[]{strArray.toString()};
    }
  }
  return new String[0];
}

public void set<property.upperCamelCaseName>(String[] <property.propertyName>) {
  this.<property.propertyName> = <property.propertyName>;
}
>>

booleanProperty(property) ::= <<

public boolean is<property.upperCamelCaseName>() {
  if (<property.propertyName> != null) {
    return <property.propertyName>;
  }
  <getValueExpression(property)>
  if (vb != null) {
    Boolean bool = (Boolean) <getValue(property)>
    if (bool != null) {
      return bool;
    }
  }
  <if(property.defaultCode)>
  return <property.defaultCode>;
  <else>
  return false;
  <endif>
}

public void set<property.upperCamelCaseName>(boolean <property.propertyName>) {
  this.<property.propertyName> = <property.propertyName>;
}
>>

BooleanProperty(property) ::= <<

public java.lang.Boolean get<property.upperCamelCaseName>() {
  if (<property.propertyName> != null) {
    return <property.propertyName>;
  }
  <getValueExpression(property)>
  if (vb != null) {
    Boolean bool = (Boolean) <getValue(property)>
    if (bool != null) {
      return bool;
    }
  }
  <if(property.defaultCode)>
  return <property.defaultCode>;
  <else>
  return null;
  <endif>
}

public void set<property.upperCamelCaseName>(java.lang.Boolean <property.propertyName>) {
  this.<property.propertyName> = <property.propertyName>;
}
>>

SeverityProperty(property) ::= <<
<NormalProperty(property)>
>>

DisplayProperty(property) ::= <<
<NormalProperty(property)>
>>

OrderByProperty(property) ::= <<
<NormalProperty(property)>
>>

WizardProperty(property) ::= <<
<NormalProperty(property)>
>>

StringProperty(property) ::= <<
<NormalProperty(property)>
>>

CharacterProperty(property) ::= <<
<NormalProperty(property)>
>>

MethodBindingProperty(property) ::= <<

public <property.type> get<property.upperCamelCaseName>() {
  return <property.propertyName>; 
}

public void set<property.upperCamelCaseName>(<property.type> <property.propertyName>) {
  this.<property.propertyName> = <property.propertyName>;
}
>>

NormalProperty(property) ::= <<

public <property.type> get<property.upperCamelCaseName>() {
  if (<property.propertyName> != null) {
    return <property.propertyName>;
  }
  <getValueExpression(property)>
  if (vb != null) {
    <if(property.defaultCode)>
    <property.type> <property.propertyName> = (<property.type>) <getValue(property)>
    if (<property.propertyName> != null) {
      return <property.propertyName>;
    }
    <else>
    return (<property.type>) <getValue(property)>
    <endif>
  }
  <if(property.defaultCode)>
  return <property.defaultCode>;
  <else>
  return null;
  <endif>
}

public void set<property.upperCamelCaseName>(<property.type> <property.propertyName>) {
  this.<property.propertyName> = <property.propertyName>;
}
>>

MeasureProperty(property) ::= <<

public Measure get<property.upperCamelCaseName>() {
  if (<property.propertyName> != null) {
    return <property.propertyName>;
  }
  <getValueExpression(property)>
  if (vb != null) {
    Object object = <getValue(property)>
    if (object instanceof Measure) {
      Measure <property.propertyName> = (Measure) object;
      return <property.propertyName>;
    } else if (object instanceof Number) {
      return new org.apache.myfaces.tobago.layout.PixelMeasure(((Number)object).intValue());
    } else if (object instanceof String) {
      return Measure.parse((String)object);
    } else if (object != null) {
      return Measure.parse(object.toString());
    }
  }
  <if(property.defaultCode)>
  return <property.defaultCode>;
  <else>
  return null;
  <endif>
}

public void set<property.upperCamelCaseName>(Measure <property.propertyName>) {
  this.<property.propertyName> = <property.propertyName>;
}
>>


field() ::= <<
private <it.internalType> <it.propertyName>;
>>

WizardSaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

ObjectSaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

IntegerSaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

StringSaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

StringArraySaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

booleanSaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

BooleanSaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

CharacterSaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

SeveritySaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

MeasureSaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

DisplaySaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

OrderBySaveStateProperty() ::= <<
values[<it.indexPlusOne>] = <it.propertyName>;
>>

MethodBindingSaveStateProperty() ::= <<
values[<it.indexPlusOne>] = saveAttachedState(context, <it.propertyName>);
>>


WizardRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

ObjectRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

IntegerRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

StringRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

StringArrayRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

booleanRestoreStateProperty() ::= <<
<it.propertyName> = (<it.internalType>) values[<it.indexPlusOne>];
>>

BooleanRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

CharacterRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

SeverityRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

MeasureRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

DisplayRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

OrderByRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) values[<it.indexPlusOne>];
>>

MethodBindingRestoreStateProperty() ::= <<
<it.propertyName> = (<it.type>) restoreAttachedState(context, values[<it.indexPlusOne>]);
>>



getValueExpression(property) ::= <<
javax.faces.el.ValueBinding vb = getValueBinding("<property.name>");
>>

getValue(property) ::= <<
vb.getValue(getFacesContext());
>>
