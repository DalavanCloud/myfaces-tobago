group tags;

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


tag(tagInfo) ::= <<
//------------------ GENERATED CODE BEGIN (do not modify!) --------------------

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <tagInfo.packageName>;

<tagInfo.imports:import(); separator="\n">

public class <tagInfo.className> extends <tagInfo.superClassName> {
  private static final Log LOG = LogFactory.getLog(<tagInfo.className>.class);
  <tagInfo.properties:field(); separator="\n">

  <if(tagInfo.properties)>
  <tagInfo.properties:property(); separator="\n">

  @Override
  public void release() {
    super.release();
    <tagInfo.properties:release(); separator="\n">
  }
  <endif>
}
>>

import() ::= <<
import <it>;
>>

release() ::= <<
<it.propertyName> = null;
>>

property() ::= <<
<if(it.literalOnly)>
public <it.type> get<it.upperCamelCaseName>() {
  return <it.propertyName>;
}

public void set<it.upperCamelCaseName>(<it.type> <it.propertyName>) {
  this.<it.propertyName> = <it.propertyName>;
}
<else>
<if(it.methodExpressionRequired)>
public javax.el.MethodExpression get<it.upperCamelCaseName>() {
  return <it.propertyName>;
}

public void set<it.upperCamelCaseName>(javax.el.MethodExpression <it.propertyName>) {
  this.<it.propertyName> = <it.propertyName>;
}
<else>
public <it.type> get<it.upperCamelCaseName>Value() {
  if (<it.propertyName> != null) {
    return (<it.type>) <it.propertyName>.getValue(javax.faces.context.FacesContext.getCurrentInstance().getELContext());
  }
  return null;
}

public boolean is<it.upperCamelCaseName>Literal() {
  return <it.propertyName>.isLiteralText();
}

public boolean is<it.upperCamelCaseName>Set() {
  return <it.propertyName> != null;
}

public void set<it.upperCamelCaseName>(javax.el.ValueExpression <it.propertyName>) {
  this.<it.propertyName> = <it.propertyName>;
}

public Object get<it.upperCamelCaseName>AsBindingOrExpression() {
  return <it.propertyName>;
}

public String get<it.upperCamelCaseName>Expression() {
  return <it.propertyName>.getExpressionString();
}
<endif>
<endif>


>>

field() ::= <<
<if(it.literalOnly)>
private String <it.propertyName>;
<else>
  <if(it.methodExpressionRequired)>
private javax.el.MethodExpression  <it.propertyName>;
  <else>
private javax.el.ValueExpression  <it.propertyName>;
  <endif>
<endif>
>>

ValueExpression() ::= <<
if (<it.propertyName> != null) {
  if (!<it.propertyName>.isLiteralText()) {
    <createValueBinding(it)>
  /*} else {
    component.set<it.upperCamelCaseName>(<it.propertyName>.getExpressionString());*/
  }
}
>>

String() ::= <<
<createStringProperty(it)>
>>

Severity() ::= <<
if (<it.propertyName> != null) {
  if (!<it.propertyName>.isLiteralText()) {
    <createValueBinding(it)>
  } else {
    component.getAttributes().put("<it.name>", <it.propertyName>.getExpressionString());
  }
}
>>

Object() ::= <<
<createStringProperty(it)>
>>

Character() ::= <<
if (<it.propertyName> != null) {
  if (!<it.propertyName>.isLiteralText()) {
    <createValueBinding(it)>
  } else {
    component.set<it.upperCamelCaseName>(<it.propertyName>.getExpressionString().charAt(0));
  }
}
>>

Boolean() ::= <<
if (<it.propertyName> != null) {
  if (!<it.propertyName>.isLiteralText()) {
    <createValueBinding(it)>
  } else {
    component.set<it.upperCamelCaseName>(Boolean.valueOf(<it.propertyName>.getExpressionString()));
  }
}
>>

Integer() ::= <<
if (<it.propertyName> != null) {
  if (!<it.propertyName>.isLiteralText()) {
    <createValueBinding(it)>
  } else {
    <if(it.widthOrHeight)>
    String <it.propertyName>Str = <it.propertyName>.getExpressionString();
    if (<it.propertyName>Str.endsWith("px")) {
      <it.propertyName>Str = <it.propertyName>Str.substring(0, <it.propertyName>Str.length() - 2);
    }
    component.set<it.upperCamelCaseName>(Integer.parseInt(<it.propertyName>Str));
    <else>
    component.set<it.upperCamelCaseName>(Integer.parseInt(<it.propertyName>.getExpressionString()));
    <endif>
  }
}
>>

Measure() ::= <<
if (<it.propertyName> != null) {
  if (!<it.propertyName>.isLiteralText()) {
    <createValueBinding(it)>
  } else {
    component.set<it.upperCamelCaseName>(org.apache.myfaces.tobago.layout.Measure.parse(<it.propertyName>));
  }
}
>>

OrderBy() ::= <<
if (<it.propertyName> != null) {
  if (!<it.propertyName>.isLiteralText()) {
    <createValueBinding(it)>
  } else {
    component.set<it.upperCamelCaseName>(org.apache.myfaces.tobago.component.AbstractUIMessages.OrderBy.parse(<it.propertyName>.getExpressionString()));
  }
}
>>

StringArray() ::= <<
if (<it.propertyName> != null) {
  if (!<it.propertyName>.isLiteralText()) {
    <createValueBinding(it)>
  } else {
    component.set<it.upperCamelCaseName>(splitList(<it.propertyName>.getExpressionString()));
  }
}
>>

TabChangeListener() ::= <<
if (<it.propertyName> != null) {
  component.add<it.template>(new org.apache.myfaces.tobago.event.MethodExpressionTabChangeListener(<it.propertyName>));
}
>>

ActionListener() ::= <<
if (<it.propertyName> != null) {
  component.add<it.template>(new javax.faces.event.MethodExpressionActionListener(<it.propertyName>));
}
>>

ValueChangeListener() ::= <<
if (<it.propertyName> != null) {
  component.add<it.template>(new javax.faces.event.MethodExpressionValueChangeListener(<it.propertyName>));
}
>>

StateChangeListener() ::= <<
if (<it.propertyName> != null) {
  component.add<it.template>(new org.apache.myfaces.tobago.event.MethodExpressionStateChangeListener(<it.propertyName>));
}
>>

SortActionListener() ::= <<
if (<it.propertyName> != null) {
  component.set<it.template>Expression(<it.propertyName>);
}
>>

SuggestMethod() ::= <<
if (<it.propertyName> != null) {
  component.set<it.template>Expression(<it.propertyName>);
}
>>

Validator() ::= <<
if (<it.propertyName> != null) {
  component.addValidator(new javax.faces.validator.MethodExpressionValidator(<it.propertyName>));
}
>>

Action() ::= <<
if (<it.propertyName> != null) {
  component.setActionExpression(<it.propertyName>);
}
>>

Converter() ::= <<
if (<it.propertyName> != null) {
  if (!<it.propertyName>.isLiteralText()) {
    <createValueBinding(it)>
  } else {
    component.setConverter(application.createConverter(<it.propertyName>.getExpressionString()));
  }
}
>>

createMethodBinding(it) ::= <<
javax.faces.el.MethodBinding methodBinding = application.createMethodBinding(<it.propertyName>.getExpressionString(),
    new Class[] { <first(it.methodSignature):{ n | <n>.class }><rest(it.methodSignature):{ n | , <n>.class}>} );
>>

createStringProperty(it) ::= <<
if (<it.propertyName> != null) {
  <if(it.literalOnly)>
  component.set<it.upperCamelCaseName>(<it.propertyName>);
  <else>
  <createValueBinding(it)>
  <endif>
}

>>

createValueBinding(it) ::= <<
component.setValueExpression("<it.name>", <it.propertyName>);
>>
